#!/bin/bash

# Пример за логически тестове с цели числа 
# Първи пример е без проверка дали променливата е число и ако INT не е число има грешен резултат
# Втория пример е с проверка по-подробно как се осъществява тя на стр. 389
# Третия пример е еднакъв с втория, с тази разлика, че е показана тип логична проверка само за цели числа  

#Четвъртия пример показва комбинация от условия с логическите функции OR AND NOT

INT=20 # въведи число, или низ, който не съдържа число и виж как първия пример ще е грешен

# Променливи, които се ползват в четвъртия пример
MIN_VAL=1
MAX_VAL=100

# Първи пример в който не се прави проверка на променливата дали е цяло число
#=============================================================================
echo "First flow control result:
--------------------------------------"
if [ $INT -eq 0 ]; then

	echo "INT is zero."
	
else
	if [ $INT -lt 0 ]; then
		echo "INT is negative."
	else
		echo "INT is positive."
	fi
	
	if [ $((INT % 2)) -eq 0 ]; then
		echo "INT is even."
	else
		echo "INT is odd."
	fi
fi

# Втори пример в който се прави проверка на променливата дали е цяло число
#=============================================================================
echo "
Second flow control result:
---------------------------------------"

if [[ "$INT" =~ ^-?[0-9]+$ ]]; then # Тук тази проверка е особено специална
				# тя показва как може да се тества стринг чрез regexp повече
				# на стр. 389  ключови са [[]] и =~ 
	
	if [ $INT -eq 0 ]; then
		echo "INT is zero."
	else
		if [ $INT -lt 0 ]; then
			echo "INT is negative."
		else
			echo "INT is positive."
		fi
	
		if [ $((INT % 2)) -eq 0 ]; then
			echo "INT is even."
		else
			echo "INT is odd."
		fi
	
	fi
else
	echo "INT is not an integer." >&2
	#exit 1 #Този коментар се маха ако се изтрие третия пример
fi

# Третия пример е сходен на втория, но тук е показано със 
# следните скоби само проверки на цели числа(()) 
#=============================================================================
echo "
Third flow control result:
---------------------------------------"
if [[ "$INT" =~ ^-?[0-9]+$ ]]; then 
			
	
	if ((INT == 0)); then # логична проверка само за цели числа
		echo "INT is zero."
	else
		if ((INT < 0)); then # логична проверка само за цели числа
			echo "INT is negative."
		else
			echo "INT is positive."
		fi
	
		if (( ((INT % 2)) == 0)); then # логична проверка само за цели числа
			echo "INT is even."
		else
			echo "INT is odd."
		fi
	
	fi
else
	echo "INT is not an integer." >&2
	# exit 1 #Този коментар се маха ако се изтрие четвъртия пример
fi

#Четвърти пример показва как се комбинират в един израз две и повече условия чрез функциите AND OR NOT
#=============================================================================

echo "
Fourth flow control example:
-----------------------------------------"
if [[ "$INT" =~ ^-?[0-9]+$ ]]; then
	
	if [[ INT -ge MIN_VAL && INT -le MAX_VAL ]]; then
		echo "$INT is within $MIN_VAL to $MAX_VAL."
	else
		echo "$INT is out of range."
	fi
	
else
	echo "INT is not an integer." >&2
	exit 1
fi



# Тези проверки важат за квадратни скоби само [[]]
# integer1 -eq integer2 integer1 е равно на integer2.
# integer1 -ne integer2 integer1 не е равно integer2.
# integer1 -le integer2 integer1 е по-малко или равно на integer2.
# integer1 -lt integer2 integer1 е по-малко integer2.
# integer1 -ge integer2 integer1 е по-голямо или равно на integer2.
# integer1 -gt integer2 integer1 е по-голямо integer2.
